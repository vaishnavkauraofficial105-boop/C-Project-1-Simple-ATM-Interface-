#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*
  node structure for transaction history
*/
typedef struct node {
    char type[10];     // Deposit / Withdraw
    int amount;
    char date[12];     // dd-mm-yyyy
    char time[10];     // hh:mm:ss
    struct node* link;
} node;

/*
  Global variables (in-memory only)
*/
int pin = 0;        // User PIN
int balance = 0;    // Account balance

/*
  Simulated Clock (start point)
*/
int simHour = 12, simMin = 0, simSec = 0;
int simDay = 6, simMonth = 9, simYear = 2025;

/*
  Function prototypes
*/
void pinGeneration(void);
int checkPin(void);
void showBalance(void);
void depositMoney(node **);
void withdrawMoney(node **);
void saveHistory(node **, char *, int);
void removeHistory(node **);
void showHistory(node **);
void getDateTime(char *date, char *timeStr);
void exportData(node **);

int main(void) {
    int choice1, choice2;
    int pinValid = 0;

    node *head = NULL;

    while (1) {
        printf("\n\nATM System\n======================\n");
        printf("1. Generate PIN\n2. Use ATM\n3. Exit\n");
        printf("\nYour choice: ");
        scanf("%d", &choice1);

        switch (choice1) {
            case 1: 
                pinGeneration();
                break;

            case 2: 
                pinValid = checkPin();
                if (pinValid) {
                    printf("\nValid PIN\n");
                } else {
                    printf("\nInvalid PIN. Please generate a PIN if you don't have one.\n");
                    break; // back to main menu
                }

                while(pinValid) {
                    printf("\nATM System Menu\n===============\n\n");
                    printf("1. Check Balance\n2. Deposit\n3. Withdraw\n4. View transaction history\n5. Quit ATM\n\n");

                    printf("Enter choice: ");
                    scanf("%d", &choice2);

                    switch(choice2) {
                        case 1: showBalance();
                                break;
                        case 2: depositMoney(&head);
                                break;
                        case 3: withdrawMoney(&head);
                                break;
                        case 4: showHistory(&head);
                                break;
                        case 5: printf("\nThank you for using the ATM\n");
                                pinValid = 0; // exit ATM menu
                                break;
                        default: printf("\nInvalid option entered!\n");
                                 break;
                    }
                }
                break;

            case 3: 
                printf("\nExiting... Goodbye!\n");
                exportData(&head);  // export before exit
                exit(EXIT_SUCCESS);

            default: 
                printf("\nInvalid choice...Try again...\n");
                break;
        }
    }
    return 0;
}

/*
  PIN checking
*/
int checkPin(void) {
    int keyPin;
    printf("\n\nEnter the PIN: \n");
    scanf("%d", &keyPin);

    return (keyPin == pin);
}

/*
  Generate a 4-digit PIN (in memory only)
*/
void pinGeneration(void) {
    srand(1234); // fixed seed for repeatable results in online compilers
    pin = 1000 + rand() % 9000;

    printf("\nPIN generated successfully\n");
    printf("\nYour generated PIN: %d\n", pin);
    printf("\nUse this PIN for ATM login\n\n");
}

void showBalance(void) {
    printf("\nYour current balance is Rs.%d\n", balance);
}

void depositMoney(node **head) {
    int depositAmount;

    printf("\nEnter amount to deposit: ");
    scanf("%d", &depositAmount);

    if (depositAmount > 0) {
        balance += depositAmount;
        printf("\nRs.%d deposited\n", depositAmount);
        saveHistory(head, "Deposit", depositAmount);
    } else {
        printf("\nInvalid amount entered\n.");
    }
}

void withdrawMoney(node **head) {
    int withdrawAmount;

    printf("\nEnter amount to withdraw: ");
    scanf("%d", &withdrawAmount);

    if (withdrawAmount > 0) {
        if (withdrawAmount > balance) {
            printf("\nCannot withdraw. Balance Rs.%d\n", balance);
        } else {
            balance -= withdrawAmount;
            printf("\nRs.%d withdrawn\n", withdrawAmount);
            saveHistory(head, "Withdraw", withdrawAmount);
        }
    } else {
        printf("\nInvalid amount entered\n.");
    }
}

/*
  Save a transaction to history (queue of max 10)
*/
void saveHistory(node **head, char *type, int amount) {
    static int count = 0;
    node *temp = (node *)malloc(sizeof(node));

    strcpy(temp->type, type);
    temp->amount = amount;
    getDateTime(temp->date, temp->time);
    temp->link = NULL;

    if (*head == NULL) {
        *head = temp;
        count++;
    } else {
        if (count == 10) {
            removeHistory(head);
            count--;
        }
        node *p = *head;
        while (p->link != NULL) {
            p = p->link;
        }
        p->link = temp;
        count++;
    }
}

/*
  Remove oldest transaction (for 10-limit queue)
*/
void removeHistory(node **head) {
    node *temp = *head;
    *head = (*head)->link;
    free(temp);
}

/*
  Show transaction history in table format
*/
void showHistory(node **head) {
    node *temp = *head;
    int i = 1;

    if (temp == NULL) {
        printf("\nNo transaction history...\n");
    } else {
        printf("\nTransaction History\n");
        printf("-------------------------------------------------------------\n");
        printf("No   | Type      | Amount   | Date       | Time\n");
        printf("-------------------------------------------------------------\n");

        while (temp != NULL) {
            printf("%-4d | %-9s | %-8d | %-10s | %-8s\n", 
                   i, temp->type, temp->amount, temp->date, temp->time);
            temp = temp->link;
            i++;
        }
        printf("-------------------------------------------------------------\n");
    }
}

/*
  Utility: Simulated Date & Time
  - Starts at 06-09-2025 12:00:00
  - Adds +5 seconds per transaction
*/
void getDateTime(char *date, char *timeStr) {
    // Format date
    sprintf(date, "%02d-%02d-%04d", simDay, simMonth, simYear);

    // Format time
    sprintf(timeStr, "%02d:%02d:%02d", simHour, simMin, simSec);

    // Advance clock by 5 seconds for next transaction
    simSec += 5;
    if (simSec >= 60) {
        simSec -= 60;
        simMin++;
    }
    if (simMin >= 60) {
        simMin -= 60;
        simHour++;
    }
    if (simHour >= 24) {
        simHour = 0;
        simDay++;
        // very basic rollover (ignores month lengths, just keeps increasing day)
    }
}

/*
  Export data (copy-friendly format at end of program)
*/
void exportData(node **head) {
    node *temp = *head;
    int i = 1;

    printf("\n================ ATM EXPORT DATA ================\n");
    printf("PIN: %d\n", pin);
    printf("Final Balance: Rs.%d\n\n", balance);

    if (temp == NULL) {
        printf("No transactions recorded.\n");
    } else {
        printf("Transaction History (up to 10)\n");
        printf("-------------------------------------------------------------\n");
        printf("No   | Type      | Amount   | Date       | Time\n");
        printf("-------------------------------------------------------------\n");

        while (temp != NULL) {
            printf("%-4d | %-9s | %-8d | %-10s | %-8s\n", 
                   i, temp->type, temp->amount, temp->date, temp->time);
            temp = temp->link;
            i++;
        }
        printf("-------------------------------------------------------------\n");
    }
    printf("=================================================\n");
    printf("\nCopy this output to save your data.\n");
}
